openapi: 3.1.0

info:
  title: Sample
  description: |-
    this is sample
  version: 1.0.0

tags:
  - name: user
    description: ""

paths:
  /login:
    post:
      description: ""
      tags:
        - auth
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        "201":
          $ref: "#/components/responses/LoginSuccess"
        "400":
          $ref: "#/components/responses/BadRequest"

  /me:
    get:
      description: ""
      tags:
        - user
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /books:
    get:
      description: ""
      tags:
        - book
      parameters:
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: date-from
          schema:
            type: string
        - in: query
          name: date-to
          schema:
            type: string

      responses:
        "200":
          $ref: "#/components/responses/BookSuccess"
        "400":
          $ref: "#/components/responses/BadRequest"

    post:
      tags:
        - book
      description: ""
      requestBody:
        $ref: "#/components/requestBodies/Book"
      responses:
        "200":
          $ref: "#/components/schemas/Book"
        "400":
          $ref: "#/components/responses/BadRequest"

  /books/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true

      tags:
        - book
      description: ""
      responses:
        "200":
          $ref: "#/components/responses/BookSuccess"
        "400":
          $ref: "#/components/responses/BadRequest"

components:
  schemas:
    Id:
      type: object
      required:
        - id
      properties:
        id:
          type: integer

    Email:
      type: object
      properties:
        email:
          type: string

    Password:
      type: object
      properties:
        password:
          type: string

    Authenticated:
      type: object
      required:
        - access-token
      properties:
        access-token:
          type: string

    Book:
      type: object
      required:
        - title
        - borrowDate
        - returnDate
      properties:
        title:
          type: string
          maximum: 50
        borrowDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date

    UserRole:
      type: string
      enum: [ADMIN, COMMON]

    User:
      type: object
      required:
        - role
      properties:
        role:
          oneOf:
            - $ref: "#/components/schemas/UserRole"

    BadRequestError:
      type: object
      additionalProperties:
        type: object
        required:
          - code
          - reason
        properties:
          code:
            type: integer
            format: int32
          reason:
            type: string

  parameters:
    BookListParams:
      in: query
      name: title
      required: true
      schema:
        type: string

  responses:
    LoginSuccess:
      description: ""
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Authenticated"

    BookSuccess:
      description: ""
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/components/schemas/Id"
                - $ref: "#/components/schemas/Book"

    BadRequest:
      description: ""
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BadRequestError"

  requestBodies:
    Login:
      description: ""
      content:
        application/json:
          schema:
            required:
              - email
              - password
            allOf:
              - $ref: "#/components/schemas/Email"
              - $ref: "#/components/schemas/Password"
    Book:
      description: ""
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Book"

examples:
  /me200:
    value:
      - role: "ADMIN"
